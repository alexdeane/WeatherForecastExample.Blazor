@using System.ComponentModel.DataAnnotations
@using FluentValidation
<MudPaper Class="pa-4">
    <MudForm @ref="_mudForm" Model="_formModel" Validation="@(_searchInputValidator.ValidateValue)" @bind-IsValid="_isValid" @bind-IsTouched="_isTouched">
        <div>
            <div Class="search-input">
                <MudTextField
                    @bind-Value="_formModel.Search"
                    For="@(() => _formModel.Search)"
                    T="string"
                    Label="Country name"
                    Style="max-width: 20%;"/>
                <MudButton
                    ButtonType="ButtonType.Button" Variant="Variant.Filled"
                    Color="Color.Primary"
                    Class="ml-auto search-button"
                    DisableElevation="true"
                    OnClick="OnSearch"
                    Disabled="!_isValid || _isLoading || !_isTouched"
                    Style="margin-top:15px;">
                    Search
                </MudButton>
                @if (_isLoading)
                {
                    <i>Searching...</i>
                }
            </div>
        </div>
    </MudForm>
</MudPaper>

@code {
    private MudForm? _mudForm;
    private SearchInput _formModel = new();
    private SearchInputValidator _searchInputValidator = new();

    private bool IsValid => _mudForm?.IsValid ?? false;
    private bool _isValid;
    private bool _isTouched;

    [Parameter]
    public EventCallback<SearchInput> SearchPerformed { get; set; }

    private bool _isLoading;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private async Task OnSearch()
    {
        await _mudForm.Validate();

        if (!IsValid) return;

        _isLoading = true;
        await SearchPerformed.InvokeAsync(_formModel);
        _isLoading = false;
    }

    public record SearchInput
    {
        public string Search { get; set; } = string.Empty;
    }

    private class SearchInputValidator : AbstractValidator<SearchInput>
    {
        public SearchInputValidator()
        {
            RuleFor(x => x.Search)
                .NotEmpty()
                .MinimumLength(3);
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<SearchInput>.CreateWithOptions((SearchInput)model, x => x.IncludeProperties(propertyName)));

            return result.IsValid
                ? Enumerable.Empty<string>()
                : result.Errors.Select(e => e.ErrorMessage);
        };
    }
}