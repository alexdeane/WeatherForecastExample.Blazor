@page "/"
@using OneOf
@using WeatherForecastExample.Blazor.Client.ClientWrappers
@using WeatherForecastExample.Blazor.Client.Models
@inject IWeatherForecastClientWrapper Client

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<MudGrid class="grid" Spacing="@GridSpacing" Justify="Justify.Center">
    <MudItem xs="12">
        <SearchForm SearchPerformed="OnSearch"></SearchForm>
    </MudItem>
    
    @if (!string.IsNullOrWhiteSpace(_errorMessage))
    {
        <MudItem xs="12">
            <p style="color: red">@_errorMessage</p>
        </MudItem>
    }

    @if (_tableDataWrappers is not null)
    {
        @foreach (var dataSourceWrapper in _tableDataWrappers)
        {
            <MudItem xs="3">
                <Table Data="dataSourceWrapper.TableData" Date="dataSourceWrapper.Date" IsLoading="@_isLoading"></Table>
            </MudItem>
        }
    }

</MudGrid>

@code {
    private readonly CancellationTokenSource _cts = new();
    private IEnumerable<TableDataWrapper>? _tableDataWrappers;
    private string? _errorMessage;
    private bool _isLoading;
    private const int GridSpacing = 2;

    public record TableDataWrapper(
        IEnumerable<Table.WeatherForecastTableEntity>? TableData,
        DateTime? Date);

    // protected override async Task OnInitializedAsync()
    // {
    // var search = "food";
    // var result = await GetData(search);
    //
    // SetResult(result);
    // }

    private async Task OnSearch(SearchForm.SearchInput searchInput)
    {
        var result = await GetData(searchInput.Search);

        SetResult(result);
    }

    private void SetResult(OneOf<WeatherForecastDto, ErrorDto> result)
        => result.Switch(success =>
        {
            _tableDataWrappers = MapData(success);
            _errorMessage = null;
        }, error =>
        {
            _errorMessage = error.UserSafeErrorMessage; 
        });

    private Task<OneOf<WeatherForecastDto, ErrorDto>> GetData(string search)
    {
        _isLoading = true;

        return Client.GetForecasts(search, _cts.Token)
            .ContinueWith(getTask =>
            {
                _isLoading = false;
                return getTask;
            }, _cts.Token)
            .Unwrap();
    }

    private static IEnumerable<TableDataWrapper>? MapData(WeatherForecastDto dto)
    {
        return dto.Data?.Select(x => new TableDataWrapper(
            TableData: x.Temperatures?.Select((t, i) => new Table.WeatherForecastTableEntity(
                Hour: i,
                Temperature: t
            )).Where(tableEntity => tableEntity.Hour % 2 == 0),
            Date: x.Date
        ));
    }
}